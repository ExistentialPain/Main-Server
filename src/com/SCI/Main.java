package com.SCI;

import com.SCI.db.Database;
import com.SCI.db.MySQL;
import com.SCI.db.Query;
import com.SCI.db.Results;
import com.SCI.net.*;
import com.SCI.secure.BCrypt;
import com.SCI.util.Dispenser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.util.*;

public class Main {
    private static final int EVENT_PORT = 3423;
    private static final int SERVER_PORT = 5332;

    public static Database getDatabaseConnection() {
        return db;
    }

    private static Database db;
    private static final String dbLogin = "root";
    private static final String dbPassword = "bardzotajnehaslo";
    private static final String dbName = "SCIGame";
    public static final Dispenser<User> users = new Dispenser<>();

    public static void main(String[] args) throws IOException, SQLException {
        db = new MySQL("jdbc:mysql://localhost", dbLogin, dbPassword, dbName);
        User.setEventHandler(EventSocketHandler.getInstance());

        EventServer eventServer = new EventServer(EVENT_PORT);
        eventServer.start();

        RestServer server = new RestServer(SERVER_PORT);

        server.registerMethodHandler("/register", HttpMethod.POST, request -> {
            HttpResponse response = new HttpResponse();
            HashMap<String, String> queries;
            try {
                queries = QueryParser.parse(request.getBody());
            } catch (MalformedURLException e) {
                response.setStatus(400);
                response.setResponse("err_malformed_query");
                return response;
            }
            String login = queries.get("login"), password = queries.get("password"), username = queries.get("username");
            if (login == null || password == null || username == null) {
                response.setStatus(400);
                response.setResponse("err_missing_params");
                return response;
            }
            try {
                Results results = db.execute(new Query("select * from `accounts` where login=? or username=?",
                        login, username).toString());
                if (results.length() != 0) {
                    response.setStatus(400);
                    response.setResponse("err_login_unavailable");
                    return response;
                }
                String passHash = BCrypt.hashpw(password, BCrypt.gensalt());
                UUID logId = UUID.randomUUID();
                Query query = new Query("insert into `accounts` (login, password, id_hash, username) values(?, ?, ?, ?)",
                        login, passHash, logId.toString(), username);
                Results r = db.execute(query);
                long id = r.getAutoGeneratedKey(0);
                db.execute(new Query("insert into `profiles` (accountID) values(?)", id));
                response.setStatus(201);
                response.setResponse("ok_created");
            } catch (SQLException e) {
                response.setStatus(500);
                response.setResponse("An internal server error occurred.");
                e.printStackTrace();
                return response;
            }

            return response;
        });

        server.registerMethodHandler("/login", HttpMethod.GET, request -> {
            System.out.println("logging in");
            HttpResponse response = new HttpResponse();
            String[] authStrings = request.getHeaders().get("Authorization").split(" ", 2);
            String authType = authStrings[0];
            String authToken = authStrings[1];
            String[] auth = new String(Base64.getDecoder().decode(authToken)).split(":");
            String login = auth[0], password = auth[1];
            Results results;
            try {
                results = db.execute(new Query("select * from `accounts` where login=?", login).toString());
            } catch (SQLException e) {
                response.setStatus(500);
                response.setResponse("An internal server error occurred.");
                e.printStackTrace();
                return response;
            }
            if (results.length() == 0) {
                response.setStatus(401);
                response.setResponse("err_wrong_credentials");
                return response;
            }

            String hashedPassword = (String) results.getRow(0).get("password");
            if (!BCrypt.checkpw(password, hashedPassword)) {
                response.setStatus(401);
                response.setResponse("err_wrong_credentials");
                return response;
            }
            response.setStatus(200);
            Long uid = (Long) results.getRow(0).get("accountID");
            System.out.println("About to see if the user is already logged in");
            User loggedIn = users.get(String.valueOf(uid));
            if (loggedIn != null) {
                try {
                    users.remove(String.valueOf(uid));
                    loggedIn.kill();
                } catch (Exception ignored) {

                }
            }
            System.out.println("Seen");
            UUID token;
            User user;
            do {
                token = UUID.randomUUID();
                user = new User(String.valueOf(uid), token.toString());
            } while (!users.putIfAbsent(String.valueOf(uid), user));
            System.out.println("Sending response");
            response.setResponse(String.valueOf(Main.EVENT_PORT) + ":" + user.getToken() + ":" + user.getId());
            return response;
        });

        server.registerMethodHandler("/logout", HttpMethod.GET, request -> {
            HttpResponse response = new HttpResponse();
            User user = users.get(request.getHeaders().get("Author"));
            if (user.equals(new User(request.getHeaders().get("Author"), request.getHeaders().get("Token")))) {
                users.remove(request.getHeaders().get("Author"));
            }
            return response;
        });

        server.registerMethodHandler("/profile", HttpMethod.GET, request -> {
            HttpResponse response = new HttpResponse();
            Database database = getDatabaseConnection();
            Results results;
            User user = users.get(request.getHeaders().get("Author"));
            if (!user.equals(new User(request.getHeaders().get("Author"), request.getHeaders().get("Token")))) {
                response.setStatus(401);
                response.setResponse("err_unauthorised");
                return response;
            }
            long id = Long.parseLong(user.getId());
            Query q = new Query("select ??, ??, ??, ?? from `profiles` where `accountID`=?",
                    "level", "time_played", "dollars", "money", id);
            try {
                results = database.execute(q);
            } catch (SQLException e) {
                e.printStackTrace();
                response.setStatus(500);
                response.setResponse("An internal server error occurred.");
                return response;
            }
            if (results.length() == 0) {
                response.setStatus(400);
                response.setResponse("err_not_exist");
                return response;
            }
            response.setStatus(200);
            response.setResponse(results.getRow(0).format("@0:@1\n"));
            return response;
        });

        server.registerMethodHandler("/friends", HttpMethod.GET, request -> {
            HttpResponse response = new HttpResponse();
            User user = new User(request.getHeaders().get("Author"), request.getHeaders().get("Token"));
            if (!user.equals(Main.users.get(request.getHeaders().get("Author")))) {
                response.setStatus(401);
                response.setResponse("err_unauthorised");
                return response;
            }
            /*Database db = getDatabaseConnection();
            try {
                Results results = db.execute(new Query("select * from friends where accountID1=? or accountID2=?",
                        Long.valueOf(user.getId()), Long.valueOf(user.getId())));
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < results.length(); ++i) {
                    Row row = results.getRow(i);
                    if (!row.get("accountID1").toString().equals(request.getHeaders().get("Author"))) {
                        sb.append(row.get("accountID1"));
                    } else {
                        sb.append(row.get("accountID2"));
                    }
                    sb.append(":");
                }
                response.setStatus(200);
                response.setResponse(sb.toString());
            } catch (SQLException e) {
                e.printStackTrace();
                response.setStatus(500);
                response.setResponse("An internal server error occurred.");
                return response;
            }*/
            List<String> friends = user.getFriendIds();
            StringBuilder sb = new StringBuilder();
            for (String friend : friends) {
                sb.append(friend).append(':');
            }
            response.setStatus(200);
            response.setResponse(sb.toString());
            return response;
        });

        server.registerMethodHandler("/user", HttpMethod.GET, request -> {
            System.out.println("userifying");
            HttpResponse response = new HttpResponse();
            HashMap<String, String> data;
            try {
                data = QueryParser.parse(request.getURI().getRawQuery());
            } catch (MalformedURLException e) {
                response.setStatus(400);
                response.setResponse("err_malformed_query");
                return response;
            }
            String name;
            try {
                name = data.get("id");
            } catch (NullPointerException e) {
                response.setStatus(400);
                response.setResponse("err_missing_params");
                return response;
            }
            Database db = getDatabaseConnection();
            Results rs;
            try {
                rs = db.execute(new Query("select * from `accounts` where accountID=?", Long.valueOf(name)));
            } catch (SQLException e) {
                e.printStackTrace();
                response.setStatus(500);
                response.setResponse("An internal database error occurred.");
                return response;
            }
            if (rs.length() == 0) {
                response.setStatus(404);
                response.setResponse("err_no_such_user");
                System.out.println("Hte id is: " + name);
                return response;
            }
            String username = (String) rs.getRow(0).get("username");
            response.setStatus(200);
            response.setResponse(username);
            return response;
        });

        server.registerMethodHandler("/test", HttpMethod.GET, request -> {
            try {
                HttpResponse response = new HttpResponse();
                File file = new File("C:\\test\\test.zip");
                FileInputStream test = new FileInputStream(file);
                response.setFixedSize(file.length());
                response.setResponse(test);
                response.setStatus(200);
                return response;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            HttpResponse response = new HttpResponse();
            response.setStatus(404);
            response.setResponse("err_not_found");
            return response;
        });

        server.start();



        Scanner in = new Scanner(System.in);
        String command;
        while (true) {
            command = in.next();
            switch (command.toLowerCase()) {
                case "stop":
                    users.kill();
                    server.stop(1);
                    eventServer.close();
                    Runtime.getRuntime().exit(0);
                    break;
                case "execute":
                    String query = in.nextLine().trim();
                    try {
                        db.execute(query);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    break;
                default:
                    System.out.println("Unknown command: " + command);
            }
        }
    }
}
